# -*- coding: utf-8 -*-
"""LGM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RChOQ9zT8ZU9G-QaxGtYAzWBxePTXSkg

LetsGrowMore Virtual Internship Program( Dec 2021 - Jan 2022)

Author : Komal Patil

Task 1 : Iris Flowers Classification ML Project

level : Beginner

The iris dataset contains three classes of flowers, Versicolor, Setosa, Virginica, and each class contains 4 features, ‘Sepal length’, ‘Sepal width’, ‘Petal length’, ‘Petal width’. The aim of the iris flower classification is to predict flowers based on their specific features.
"""

import io
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
from google.colab import files

uploaded = files.upload()

data = pd.read_csv(io.BytesIO(uploaded['iris.data']),names=['Sepal_length','Sepal_width','Petal_length','Petal_width','Class'])
data.head()

data.info()

data.describe()

"""From this description, we can see all the descriptions about the data, like average length and width, minimum value, maximum value, the 25%, 50%, and 75% distribution value, etc.

To visualize the whole dataset we used the seaborn pair plot method. It plots the whole dataset’s information.
"""

sb.pairplot(data,hue='Class',vars=['Sepal_length','Sepal_width','Petal_length','Petal_width'])

"""From this visualization, we can tell that iris-setosa is well separated from the other two flowers.

And iris virginica is the longest flower and iris setosa is the shortest.
"""

X=data[['Sepal_length','Sepal_width','Petal_length','Petal_width']]
Y=data['Class']

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split( X ,Y ,test_size=0.2 ,random_state=1)

"""**LOGISTIC REGRESSION** 

We will be using logistic regression to train our model as out predicted outcome is a category or class is obtained based on the analysis of some input features. We will be using Multinomial Logistic Regression. as there are three possible output categories.
"""

from sklearn.linear_model import LogisticRegression
from sklearn import metrics
model = LogisticRegression()
model.fit(X_train,Y_train)
y_pred = model.predict(X_test)
print('Accuracy of the logistic regression classifier on test set:{:f}'.format(model.score(X_test,Y_test)))

from sklearn.metrics import classification_report
print(classification_report(Y_test,y_pred))

from sklearn.metrics import accuracy_score
train_score = str(model.score(X_train,Y_train)*100)
test_score = str(model.score(X_test,Y_test)*100)
accu_score = str(accuracy_score(Y_test,y_pred)*100)
print(f'Train Score :{train_score[:6]}%\nTest Score : {test_score[:6]}%\nAccuracy Score : {accu_score[:6]}%')

"""**CONCLUSION**

The accuracy of the classification model using Logistic Regression Agorithm is 96.666%
"""